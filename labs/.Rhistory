kable(data)
?kable
v=rand(1,10)
data<- rbind(v, v, v)
v=randn(1,10)
?runif
v=runif(10, 0, 1)
v
data<- rbind(v, v, v)
colnames(data) <- paste("c", 1:ncol(data), sep="")
rownames(data) <- paste("r", 1:nrow(data), sep="")
kable(data)
kable(data, digits=2)
kable(data, digits=2, row.names=F, col.names=F)
library(knitr)
summary(cars)
v=runif(10, 0, 1)
data<- rbind(v, v, v)
colnames(data) <- paste("c", 1:ncol(data), sep="")
rownames(data) <- paste("r", 1:nrow(data), sep="")
kable(data, digits=2, row.names=F, col.names=F)
kable(data, digits=2, row.names=FALSE, col.names=FALSE)
kable(data, digits=2, row.names=T, col.names=T)
kable(data, digits=2, row.names=T)
kable(data, digits=2, row.names=F)
kable(data, digits=2, row.names=F, col.names=paste("newc", 1:ncol(data), sep=""))
kable(data, digits=2, row.names=F, col.names=paste("newc", 1:ncol(data), sep=""), align="c")
kable(data, digits=2, row.names=F, col.names=paste("newc", 1:ncol(data), sep=""), align="c", caption="My table")
summary(out)$coef
library(knitr)
summary(cars)
v=runif(10, 0, 1)
data<- rbind(v, v, v)
colnames(data) <- paste("c", 1:ncol(data), sep="")
rownames(data) <- paste("r", 1:nrow(data), sep="")
kable(data, digits=2, row.names=F, col.names=paste("newc", 1:ncol(data), sep=""), align="c", caption="My table")
n <- 100
x <- rnorm(n)
y <- 2*x + rnorm(n)
out <- lm(y ~ x)
library(xtable)
tab <- xtable(summary(out)$coef, digits=c(0, 2, 2, 1, 2))
print(tab, type="html")
tab <- xtable(data)
print(tab, type="html")
library(Seurat)
?quietly
require(xyz, quietly = TRUE)
?version
R.version
data<- rbind(v, v, v)
data<- rbind(v, v, v)
library(knitr)
summary(cars)
v=runif(10, 0, 1)
data<- rbind(v, v, v)
colnames(data) <- paste("c", 1:ncol(data), sep="")
rownames(data) <- paste("r", 1:nrow(data), sep="")
kable(data, digits=2, row.names=F, col.names=paste("newc", 1:ncol(data), sep=""), align="c", caption="My table")
# n <- 100
# x <- rnorm(n)
# y <- 2*x + rnorm(n)
# out <- lm(y ~ x)
# library(xtable)
# tab <- xtable(data)
# print(tab, type="html")
library(knitr)
summary(cars)
v=runif(10, 0, 1)
data<- rbind(v, v, v)
colnames(data) <- paste("c", 1:ncol(data), sep="")
rownames(data) <- paste("r", 1:nrow(data), sep="")
kable(data, digits=2, row.names=F, col.names=paste("newc", 1:ncol(data), sep=""), align="c", caption="My table")
# n <- 100
# x <- rnorm(n)
# y <- 2*x + rnorm(n)
# out <- lm(y ~ x)
# library(xtable)
# tab <- xtable(data)
# print(tab, type="html")
library(knitr)
summary(cars)
v=runif(10, 0, 1)
data<- rbind(v, v, v)
colnames(data) <- paste("c", 1:ncol(data), sep="")
rownames(data) <- paste("r", 1:nrow(data), sep="")
kable(data, digits=2, row.names=F, col.names=paste("newc", 1:ncol(data), sep=""), align="c", caption="My table")
# n <- 100
# x <- rnorm(n)
# y <- 2*x + rnorm(n)
# out <- lm(y ~ x)
# library(xtable)
# tab <- xtable(data)
# print(tab, type="html")
library(knitr)
summary(cars)
v=runif(10, 0, 1)
data<- rbind(v, v, v)
colnames(data) <- paste("c", 1:ncol(data), sep="")
rownames(data) <- paste("r", 1:nrow(data), sep="")
kable(data, digits=2, row.names=F, col.names=paste("newc", 1:ncol(data), sep=""), align="c", caption="My table")
# n <- 100
# x <- rnorm(n)
# y <- 2*x + rnorm(n)
# out <- lm(y ~ x)
# library(xtable)
# tab <- xtable(data)
# print(tab, type="html")
test
test2 <- test+10
ls
test
test2
test3 <- cbind(test, test2)
test3
which(test>4 | test2>14)
install.packages("devtools")
library(devtools)
install_url("https://github.com/satijalab/seurat/releases/download/v1.4.0/Seurat_1.4.0.4.tgz", binary = TRUE)
library(Seurat)
library(Seurat)
test
test2
test3
as.matrix(test3)
test3[1,1]="bla"
test3
test3 <- cbind(test, test2)
test3
test3[1,1]="d"
test3
test4 <- data.frame(c1=test3[,1], test)
test4
test4[1,1]
as.class(test3)
class(test3)
test3
class(test4)
test4$teset
test4$test
mode(test3)
mode(test4)
mode(test3[,1])
mode(test3[,2])
mode(test4[,2])
mode(test4[,2])
test3
test3$test
names(test3)
?"matrix"
library(Seurat)
library(Seurat)
library(dplyr)
library(Matrix)
pbmc.data <- Read10X("~/Downloads/filtered_gene_bc_matrices/hg19/")
library(Seurat)
library(dplyr)
library(Matrix)
76*2
16*8
7*24
14*24
3*8
4*8
file.report <- "/Users/olga/Documents/NBIS/!PROJECTS/3339_schizophrenia/00-Reports/P1858_aggregate_report.csv"
data.report <- read.delim(file.report)
head(data.report)
file.report <- "/Users/olga/Documents/NBIS/!PROJECTS/3339_schizophrenia/P1858_aggregate_report_20170110.txt"
data.report <- read.delim(file.report)
head(data.report)
dim(data.report)
boxplot(data.report$automsomal_coverage)
?stripchart
boxplot(data.report$automsomal_coverage)
stripchart(data.report$automsomal_coverage)
stripchart(data.report$automsomal_coverage, vertical = TRUE, add=TRUE)
boxplot(data.report$automsomal_coverage)
stripchart(data.report$automsomal_coverage, vertical = TRUE, add=TRUE)
stripchart(data.report$automsomal_coverage, vertical = TRUE, add=TRUE, method = "jitter")
stripchart(data.report$automsomal_coverage, vertical = TRUE, add=TRUE, method = "jitter", col="blue")
boxplot(data.report$automsomal_coverage)
stripchart(data.report$automsomal_coverage, vertical = TRUE, add=TRUE, method = "jitter", col="blue")
boxplot(data.report$automsomal_coverage, ylab="dd")
boxplot(data.report$mean_coverage, ylab="")
stripchart(data.report$mean_coverage, vertical = TRUE, add=TRUE, method = "jitter", col="blue")
file.report <- "/Users/olga/Documents/NBIS/!PROJECTS/3339_schizophrenia/P1858_aggregate_report_20170110.txt"
data.report <- read.delim(file.report)
head(data.report)
boxplot(data.report$duplication_rate, ylab="")
stripchart(data.report$duplication_rate, vertical = TRUE, add=TRUE, method = "jitter", col="blue")
boxplot(data.report$percent_aligned, ylab="")
stripchart(data.report$percent_aligned, vertical = TRUE, add=TRUE, method = "jitter", col="blue")
?par
file.report <- "/Users/olga/Documents/NBIS/!PROJECTS/3339_schizophrenia/P1858_aggregate_report_20170110.txt"
data.report <- read.delim(file.report)
boxplot(data.report$snpeff.heterotypic_snps, ylab="mean coverage")
head(data.report$snpeff.heterotypic_snps)
data.report <- read.delim(file.report)
boxplot(data.report$snpeff.heterotypic_snps, ylab="mean coverage")
data.report <- read.delim(file.report)
head(data.report$snpeff.heterotypic_snps)
file.report <- "/Users/olga/Documents/NBIS/!PROJECTS/3339_schizophrenia/P1858_aggregate_report_20170110.txt"
data.report <- read.delim(file.report)
head(data.report)
file.report <- "/Users/olga/Documents/NBIS/!PROJECTS/3339_schizophrenia/P1858_aggregate_report_20170110.txt"
data.report <- read.delim(file.report)
boxplot(data.report$snpeff.heterotypic_snps, ylab="mean coverage")
boxplot(data.report$snpeff.heterotypic_snps, ylab="SNPs heterotypic")
stripchart(data.report$snpeff.heterotypic_snps, vertical = TRUE, add=TRUE, method = "jitter", col="blue")
boxplot(data.report$snpeff.homotypic_snps, ylab="SNPs homotypic")
stripchart(data.report$snpeff.homotypic_snps, vertical = TRUE, add=TRUE, method = "jitter", col="blue")
boxplot(data.report$snpeff.heterotypic_snps, ylab="SNPs heterotypic ")
stripchart(data.report$snpeff.heterotypic_snps, vertical = TRUE, add=TRUE, method = "jitter", col="blue")
boxplot(data.report$snpeff.homotypic_snps, ylab="SNPs homotypic")
stripchart(data.report$snpeff.homotypic_snps, vertical = TRUE, add=TRUE, method = "jitter", col="blue")
boxplot(data.report$snpeff.percent_missense_SNPs, ylab="duplication rate [%]")
stripchart(data.report$snpeff.percent_missense_SNPs, vertical = TRUE, add=TRUE, method = "jitter", col="blue")
?Ressssion
?Rsession
?R.session
755 - 261
90/4
90/4.5
8 + 12 + 5
16*2
76*2
158+78+278
citation()
3.9+0.8+1.8
100-6.5
3.9+0.8+1.6
100-6.3
152/2
1400/4
1500/4
2300/4
3400+3000+4800
3400+3000+4800
11200/4
3400+4800+300
3400+4800+3000
11200/4
11200/4/6
2200+149+149+70
463182/12
18*2*90
250*5
225*5
225*5*4
2013+1849
all <- 2013+1849
201300/all
184900/all
60*800
3*8
90*18*2
11520/18
4*8
110/8
1195/12
1195/10
40*4
1195/10/4
16*4
20*4
6*8
6*5
15*4
110/4
110/2
7883472/4
library(edgeR)
targets
25+8
20/4
20/5
30/5
40/5
library(sva)
?ComBat
a=1:10
mydata <- rbind(a,a,a,a)
mydata
mybatch=rep(1,2,5)
mybatch
mybatch=rep(c(1,2),5)
mybatch
dataNew <- ComBat(mydata, mybatch)
dataNew <- ComBat(mydata, mybatch, par.prior=TRUE, prior.plots=FALSE)
dataNew <- ComBat(mydata, mybatch, par.prior=TRUE)
mymatrix <- rand(5,10)
mymatrix <- randn(5,10)
mymatrix <- replicate(10, rnorm(20))
mymatrix
dim(mymatrix)
length(batch)
length(mybatch)
dataNew <- ComBat(mymatrix, mybatch, par.prior=TRUE)
mymatrix
dataNew <- ComBat(mymatrix, mybatch, par.prior=TRUE)
head(mymatrix)
head(dataNew)
19+6
19+8
19+9
60 - 8
52-35
40-10-6
40 - 7 - 16
16*800
800*8
install.packages('maps')
install.packages('geosphere')
library('maps')
library('geosphere')
map("state", col="grey20", fill=TRUE, bg="black", lwd=0.1)
?map
map("sweden", col="grey20", fill=TRUE, bg="black", lwd=0.1)
map(database = "world", col="grey20", fill=TRUE, bg="black", lwd=0.1)
help(package='maps')
map(database = "italy", col="grey20", fill=TRUE, bg="black", lwd=0.1)
install.packages("mapdata")
map('worldHires','Italy')
map('world2Hires')
map('worldHires')
?map
library(sp)
con <- url("http://gadm.org/data/rda/CHE_adm1.RData")
print(load(con))
con <- url("http://gadm.org/data/rda/CHE_adm1.RData")
print(load(con))
map()
map('world2Hires')
?map
map('worldHires')
?sessionInfo()
8*7
8*7+24
8*7+24+14+16+14
40 - 14
40 - 14 - 14
40 - 14 - 16
40 - 14 - 18
16+8
total=1670
asa=220
asa*100/total
160/40
178-40
?save
save.image(file="counts.RData")
40+24+80
80 - 55
80 - 55 - 16
40 - 24
80-65
setwd("~/Documents/NBIS/Teaching/201710_ChIP-seq/Git")
library(csaw)
source("https://bioconductor.org/biocLite.R")
biocLite("csaw")
setwd("~/Documents/NBIS/Teaching/201710_ChIP-seq/chipseq_local/diffBind")
library(DiffBind)
library(ChIPQC)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
samples = read.csv("samples_REST.txt", sep="\t")
samples
res=dba(sampleSheet=samples, config=data.frame(RunParallel=FALSE))
res
plot(res)
resqc = ChIPQC(res,annotation="hg19", config=data.frame(RunParallel=TRUE))
library(ChIPQC)
source("https://bioconductor.org/biocLite.R")
biocLite("ChIPQC")
library(ChIPQC)
library(DiffBind)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
samples = read.csv("samples_REST.txt", sep="\t")
samples
res=dba(sampleSheet=samples, config=data.frame(RunParallel=FALSE))
res
resqc = ChIPQC(res,annotation="hg19", config=data.frame(RunParallel=TRUE))
ChIPQCreport(resqc)
64/4
?write.table
setwd("~/Documents/NBIS/Teaching/201710_ChIP-seq/chipseq_local/diffBind")
setwd("~/Documents/NBIS/Teaching/201710_ChIP-seq/chipseq_local/diffBind")
library(DiffBind)
# reading in the sample information (metadata)
samples = read.csv("samples_REST.txt", sep="\t")
#	inspecting the metadata
samples
#	creating an object containing data
res=dba(sampleSheet=samples, config=data.frame(RunParallel=FALSE))
# inspecting the object: how many peaks are identifed given the default settings?
res
# counting reads mapping to intervals (peaks)
# at this step a normalisation is applied by the default set to: score=DBA_SCORE_TMM_MINUS_FULL
res.cnt = dba.count(res, minOverlap=2, score=DBA_SCORE_TMM_MINUS_FULL, fragmentSize=130)
# inspecting the object: notice the FRiP values!
res.cnt
plot(res.cnt)
dba.plotPCA(res.cnt,DBA_TISSUE,label=DBA_TISSUE)
res.cnt2 = dba.contrast(res.cnt, categories=DBA_TISSUE, minMembers=2)
res.cnt2
res.cnt3 = dba.analyze(res.cnt2)
res.cnt3
plot(res.cnt3, contrast=1)
pvals <- dba.plotBox(res.cnt3, contrast=1)
res.db1 = dba.report(res.cnt3, contrast=1)
dba.plotVenn(res.cnt3, 1:4, label1="HeLa",labl2="neuron",label3="HepG2",label4="sknsh")
dba.plotVenn(res.cnt3, 1:4, label1="HeLa",labl2="neuron",label3="HepG2",label4="sknsh")
res.cnt3
res.cnt3
res.db1 = dba.report(res.cnt3, contrast=1)
dba.plotVenn(res.cnt3, 1:4, label1="HeLa",labl2="neuron",label3="HepG2",label4="sknsh")
dba.plotVenn(res.cnt3)
dba.plotVenn(res.cnt3, contrast=1:4, label1="HeLa",labl2="neuron",label3="HepG2",label4="sknsh")
dba.plotVenn(res.cnt3, 1:4, label1="HeLa",labl2="neuron",label3="HepG2",label4="sknsh")
dba.plotVenn(res.cnt3, 1:4, label1="HeLa",label2="neuron",label3="HepG2",label4="sknsh")
save.image("diffBind.RData")
library(ChIPpeakAnno)
data(TSS.human.GRCh37)
data.peaks = dba.report(res.cnt3, contrast=1)
data.peaksAnno=annotatePeakInBatch(data.peaks, AnnotationData=TSS.human.GRCh37)
write.table(data.peaksAnno, file="peaks_HeLa_vs_neuronal.txt", sep="\t", row.names=F)
library(org.Hs.eg.db)
library(reactome.db)
data(TSS.human.GRCh37)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
peaks.featuresDist<-assignChromosomeRegion(data.peaksAnno, nucleotideLevel=FALSE, precedence=c("Promoters", "immediateDownstream", "fiveUTRs", "threeUTRs","Exons", "Introns"), TxDb=txdb)
barplot(peaks.featuresDist$percentage, las=1, horiz=T)
peaks.go <- getEnrichedGO(data.peaksAnno, orgAnn="org.Hs.eg.db", maxP=.1, minGOterm=10, multiAdjMethod="BH", condense=TRUE)
save.image("GO.RData")
head(peaks.go$bp[, 1:2])
head(peaks.go$mf[, 1:2])
head(peaks.go$cc[, 1:2])
peaks.pathways <- getEnrichedPATH(data.peaksAnno, "org.Hs.eg.db", "reactome.db", maxP=.05)
head(peaks.pathways)
print(unique(peaks.pathways$PATH))
save.image("Funct.RData")
library(BSgenome.Hsapiens.UCSC.hg19)
source("https://bioconductor.org/biocLite.R")
biocLite("BSgenome.Hsapiens.UCSC.hg19")
library(BSgenome.Hsapiens.UCSC.hg19)
seq <- getAllPeakSequence(data.peaks, upstream=20, downstream=20, genome=Hsapiens)
seq
write2FASTA(seq, "test.fa")
library(motifStack)
source("https://bioconductor.org/biocLite.R")
biocLite("motifStack")
library(motifStack)
pfms <- mapply(function(.ele, id)
new("pfm", mat=.ele, name=paste("SAMPLE motif", id)),
os$motifs, 1:length(os$motifs))
pfms <- mapply(function(.ele, id)
new("pfm", mat=.ele, name=paste("SAMPLE motif", id)),
os$motifs, 1:length(os$motifs))
length(seq)
data.peaks
seq
class(seq)
freqs <- oligoFrequency(Hsapiens$chr1, MarkovOrder=3)
os <- oligoSummary(seq, oligoLength=6, MarkovOrder=3,
quickMotif=FALSE, freqs=freqs)
?oligoFrequency
pfms <- mapply(function(.ele, id)
new("pfm", mat=.ele, name=paste("SAMPLE motif", id)),
os$motifs, 1:length(os$motifs))
zscore <- sort(os$zscore)
h <- hist(zscore, breaks=100, xlim=c(-50, 50), main="Histogram of Z-score")
text(zscore[length(zscore)], max(h$counts)/10,
labels=names(zscore[length(zscore)]), adj=1)
pfms <- mapply(function(.ele, id)
new("pfm", mat=.ele, name=paste("SAMPLE motif", id)),
os$motifs, 1:length(os$motifs))
zscore
os
id
os
setwd("~/Documents/NBIS/Teaching/201710_ChIP-seq/Git/labs")
setwd("~/Documents/NBIS/Teaching/Templates/Git/Certificates")
(data.csv$Final==1)
setwd("~/Documents/NBIS/Teaching/Templates/Git/Certificates")
file.csv <- "NBIS course application_20171106.csv"
data.csv <- read.csv(file.csv)
idx.final <- which(data.csv$Final==1)
rm(list=ls())
library(knitr)
# Input data
file.csv <- "NBIS course application_20171106.csv"
data.csv <- read.csv(file.csv)
# Number
idx.final <- which(data.csv$Final==1)
studentsID <- 1:length(idx.final)
#studentsID <- 1:3
for (st in studentsID){
print(st)
knit2pdf("certificates.Rnw", output=paste0('diploma_', st, '.tex'))
}
for (st in studentsID){
print(st)
tools::texi2pdf(paste0("/Users/olga/Documents/NBIS/Teaching/Templates/Git/Certificates/", paste0('diploma_', st, '.tex')),
clean = TRUE, quiet = TRUE)
}
files.remove <- c(dir(pattern=".out"), dir(pattern=".aux"), dir(pattern=".bbl"), dir(pattern="xml"), dir(pattern=".bib"), dir(pattern=".log"), dir(pattern="blg"), dir(pattern=".tex"))
file.remove(files.remove)
source('~/Documents/NBIS/Teaching/Templates/Git/Certificates/certificates.R')
setwd("~/Documents/NBIS/Teaching/201710_ChIP-seq/Git/labs")
R.version()
Rversion()
version
